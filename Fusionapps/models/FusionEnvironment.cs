/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.FusionappsService.Models
{
    /// <summary>
    /// Description of FusionEnvironment.
    /// </summary>
    public class FusionEnvironment 
    {
        
        /// <value>
        /// Unique identifier that is immutable on creation
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Id is required.")]
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }
        
        /// <value>
        /// FusionEnvironment Identifier, can be renamed
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "DisplayName is required.")]
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }
        
        [JsonProperty(PropertyName = "maintenancePolicy")]
        public GetMaintenancePolicyDetails MaintenancePolicy { get; set; }
        
        /// <value>
        /// The next maintenance for this environment
        /// </value>
        [JsonProperty(PropertyName = "timeUpcomingMaintenance")]
        public System.Nullable<System.DateTime> TimeUpcomingMaintenance { get; set; }
        
        /// <value>
        /// Compartment Identifier
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "CompartmentId is required.")]
        [JsonProperty(PropertyName = "compartmentId")]
        public string CompartmentId { get; set; }
        
        /// <value>
        /// FusionEnvironmentFamily Identifier
        /// </value>
        [JsonProperty(PropertyName = "fusionEnvironmentFamilyId")]
        public string FusionEnvironmentFamilyId { get; set; }
        
        /// <value>
        /// List of subscription IDs.
        /// </value>
        [JsonProperty(PropertyName = "subscriptionIds")]
        public System.Collections.Generic.List<string> SubscriptionIds { get; set; }
                ///
        /// <value>
        /// Type of the FusionEnvironment.
        /// </value>
        ///
        public enum FusionEnvironmentTypeEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "PRODUCTION")]
            Production,
            [EnumMember(Value = "TEST")]
            Test,
            [EnumMember(Value = "DEVELOPMENT")]
            Development
        };

        /// <value>
        /// Type of the FusionEnvironment.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "FusionEnvironmentType is required.")]
        [JsonProperty(PropertyName = "fusionEnvironmentType")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<FusionEnvironmentTypeEnum> FusionEnvironmentType { get; set; }
        
        /// <value>
        /// BYOK key id
        /// </value>
        [JsonProperty(PropertyName = "kmsKeyId")]
        public string KmsKeyId { get; set; }
        
        /// <value>
        /// BYOK key info
        /// </value>
        [JsonProperty(PropertyName = "kmsKeyInfo")]
        public System.Object KmsKeyInfo { get; set; }
        
        /// <value>
        /// The IDCS domain created for the fusion instance
        /// </value>
        [JsonProperty(PropertyName = "domainId")]
        public string DomainId { get; set; }
        
        /// <value>
        /// The IDCS Domain URL
        /// </value>
        [JsonProperty(PropertyName = "idcsDomainUrl")]
        public string IdcsDomainUrl { get; set; }
        
        /// <value>
        /// Patch bundle names
        /// </value>
        [JsonProperty(PropertyName = "appliedPatchBundles")]
        public System.Collections.Generic.List<string> AppliedPatchBundles { get; set; }
        
        /// <value>
        /// Version of Fusion Apps used by this environment
        /// </value>
        [JsonProperty(PropertyName = "version")]
        public string Version { get; set; }
        
        /// <value>
        /// Public URL
        /// </value>
        [JsonProperty(PropertyName = "publicUrl")]
        public string PublicUrl { get; set; }
        
        /// <value>
        /// DNS prefix
        /// </value>
        [JsonProperty(PropertyName = "dnsPrefix")]
        public string DnsPrefix { get; set; }
        
        /// <value>
        /// Language packs
        /// </value>
        [JsonProperty(PropertyName = "additionalLanguagePacks")]
        public System.Collections.Generic.List<string> AdditionalLanguagePacks { get; set; }
        
        /// <value>
        /// Enable IPv4/IPv6 dual stack support for the environment.  Setting to true will assign an IPv6 address to the environment in addition to an IPv4 address.
        /// </value>
        [JsonProperty(PropertyName = "isIPv6DualStackEnabled")]
        public System.Nullable<bool> IsIPv6DualStackEnabled { get; set; }
        
        /// <value>
        /// The lockbox Id of this fusion environment. If there's no lockbox id, this field will be null
        /// </value>
        [JsonProperty(PropertyName = "lockboxId")]
        public string LockboxId { get; set; }
        
        /// <value>
        /// If it's true, then the Break Glass feature is enabled
        /// </value>
        [JsonProperty(PropertyName = "isBreakGlassEnabled")]
        public System.Nullable<bool> IsBreakGlassEnabled { get; set; }
        
        [JsonProperty(PropertyName = "refresh")]
        public RefreshDetails Refresh { get; set; }
        
        /// <value>
        /// Network Access Control Rules
        /// </value>
        [JsonProperty(PropertyName = "rules")]
        public System.Collections.Generic.List<Rule> Rules { get; set; }
        
        /// <value>
        /// The time the the FusionEnvironment was created. An RFC3339 formatted datetime string
        /// </value>
        [JsonProperty(PropertyName = "timeCreated")]
        public System.Nullable<System.DateTime> TimeCreated { get; set; }
        
        /// <value>
        /// The time the FusionEnvironment was updated. An RFC3339 formatted datetime string
        /// </value>
        [JsonProperty(PropertyName = "timeUpdated")]
        public System.Nullable<System.DateTime> TimeUpdated { get; set; }
                ///
        /// <value>
        /// The current state of the ServiceInstance.
        /// </value>
        ///
        public enum LifecycleStateEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "CREATING")]
            Creating,
            [EnumMember(Value = "UPDATING")]
            Updating,
            [EnumMember(Value = "ACTIVE")]
            Active,
            [EnumMember(Value = "INACTIVE")]
            Inactive,
            [EnumMember(Value = "DELETING")]
            Deleting,
            [EnumMember(Value = "DELETED")]
            Deleted,
            [EnumMember(Value = "FAILED")]
            Failed
        };

        /// <value>
        /// The current state of the ServiceInstance.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "LifecycleState is required.")]
        [JsonProperty(PropertyName = "lifecycleState")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<LifecycleStateEnum> LifecycleState { get; set; }
        
        /// <value>
        /// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        /// </value>
        [JsonProperty(PropertyName = "lifecycleDetails")]
        public string LifecycleDetails { get; set; }
        
        /// <value>
        /// Environment Specific Guid/ System Name
        /// </value>
        [JsonProperty(PropertyName = "systemName")]
        public string SystemName { get; set; }
        
        [JsonProperty(PropertyName = "environmentRole")]
        public EnvironmentRole EnvironmentRole { get; set; }
        
        /// <value>
        /// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
        /// Example: {&quot;bar-key&quot;: &quot;value&quot;}
        /// </value>
        [JsonProperty(PropertyName = "freeformTags")]
        public System.Collections.Generic.Dictionary<string, string> FreeformTags { get; set; }
        
        /// <value>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace.
        /// Example: {&quot;foo-namespace&quot;: {&quot;bar-key&quot;: &quot;value&quot;}}
        /// </value>
        [JsonProperty(PropertyName = "definedTags")]
        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, System.Object>> DefinedTags { get; set; }
        
        /// <value>
        /// Environment suspended status
        /// </value>
        [JsonProperty(PropertyName = "isSuspended")]
        public System.Nullable<bool> IsSuspended { get; set; }
        
    }
}
