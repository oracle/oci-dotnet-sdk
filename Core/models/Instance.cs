/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.CoreService.Models
{
    /// <summary>
    /// A compute host. The image used to launch the instance determines its operating system and other
    /// software. The shape specified during the launch process determines the number of CPUs and memory
    /// allocated to the instance.
    /// <br/>
    /// When you launch an instance, it is automatically attached to a virtual
    /// network interface card (VNIC), called the *primary VNIC*. The VNIC
    /// has a private IP address from the subnet's CIDR. You can either assign a
    /// private IP address of your choice or let Oracle automatically assign one.
    /// You can choose whether the instance has a public IP address. To retrieve the
    /// addresses, use the {@link #listVnicAttachments(ListVnicAttachmentsRequest) listVnicAttachments}
    /// operation to get the VNIC ID for the instance, and then call
    /// {@link #getVnic(GetVnicRequest) getVnic} with the VNIC ID.
    /// <br/>
    /// For more information, see
    /// [Overview of the Compute Service](https://docs.cloud.oracle.com/iaas/Content/Compute/Concepts/computeoverview.htm).
    /// <br/>
    /// To use any of the API operations, you must be authorized in an IAM policy. If you're not authorized,
    /// talk to an administrator. If you're an administrator who needs to write policies to give users access, see
    /// [Getting Started with Policies](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/policygetstarted.htm).
    /// <br/>
    /// **Warning:** Oracle recommends that you avoid using any confidential information when you
    /// supply string values using the API.
    /// 
    /// </summary>
    public class Instance 
    {
        
        /// <value>
        /// The availability domain the instance is running in.
        /// <br/>
        /// Example: Uocm:PHX-AD-1
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "AvailabilityDomain is required.")]
        [JsonProperty(PropertyName = "availabilityDomain")]
        public string AvailabilityDomain { get; set; }
        
        /// <value>
        /// The OCID of the compute capacity reservation this instance is launched under.
        /// When this field contains an empty string or is null, the instance is not currently in a capacity reservation.
        /// For more information, see [Capacity Reservations](https://docs.cloud.oracle.com/iaas/Content/Compute/Tasks/reserve-capacity.htm#default).
        /// 
        /// </value>
        [JsonProperty(PropertyName = "capacityReservationId")]
        public string CapacityReservationId { get; set; }
        
        /// <value>
        /// The OCID of the compartment that contains the instance.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "CompartmentId is required.")]
        [JsonProperty(PropertyName = "compartmentId")]
        public string CompartmentId { get; set; }
        
        [JsonProperty(PropertyName = "placementConstraintDetails")]
        public PlacementConstraintDetails PlacementConstraintDetails { get; set; }
        
        /// <value>
        /// Whether AI enterprise is enabled on the instance.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "isAIEnterpriseEnabled")]
        public System.Nullable<bool> IsAIEnterpriseEnabled { get; set; }
        
        /// <value>
        /// The OCID of the cluster placement group of the instance.
        /// </value>
        [JsonProperty(PropertyName = "clusterPlacementGroupId")]
        public string ClusterPlacementGroupId { get; set; }
        
        /// <value>
        /// The OCID of the dedicated virtual machine host that the instance is placed on.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "dedicatedVmHostId")]
        public string DedicatedVmHostId { get; set; }
        
        /// <value>
        /// Defined tags for this resource. Each key is predefined and scoped to a
        /// namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
        /// <br/>
        /// Example: {&quot;Operations&quot;: {&quot;CostCenter&quot;: &quot;42&quot;}}
        /// </value>
        [JsonProperty(PropertyName = "definedTags")]
        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, System.Object>> DefinedTags { get; set; }
        
        /// <value>
        /// [Security attributes](https://docs.cloud.oracle.com/iaas/Content/zero-trust-packet-routing/zpr-artifacts.htm#security-attributes) are labels
        /// for a resource that can be referenced in a [Zero Trust Packet Routing](https://docs.cloud.oracle.com/iaas/Content/zero-trust-packet-routing/overview.htm)
        /// (ZPR) policy to control access to ZPR-supported resources.
        /// <br/>
        /// Example: {&quot;Oracle-DataSecurity-ZPR&quot;: {&quot;MaxEgressCount&quot;: {&quot;value&quot;:&quot;42&quot;,&quot;mode&quot;:&quot;audit&quot;}}}
        /// </value>
        [JsonProperty(PropertyName = "securityAttributes")]
        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, System.Object>> SecurityAttributes { get; set; }
                ///
        /// <value>
        /// The lifecycle state of the `securityAttributes`
        /// </value>
        ///
        public enum SecurityAttributesStateEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "STABLE")]
            Stable,
            [EnumMember(Value = "UPDATING")]
            Updating
        };

        /// <value>
        /// The lifecycle state of the `securityAttributes`
        /// </value>
        [JsonProperty(PropertyName = "securityAttributesState")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<SecurityAttributesStateEnum> SecurityAttributesState { get; set; }
        
        /// <value>
        /// A user-friendly name. Does not have to be unique, and it's changeable.
        /// Avoid entering confidential information.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }
        
        /// <value>
        /// Additional metadata key/value pairs that you provide. They serve the same purpose and functionality
        /// as fields in the `metadata` object.
        /// <br/>
        /// They are distinguished from `metadata` fields in that these can be nested JSON objects (whereas `metadata`
        /// fields are string/string maps only).
        /// 
        /// </value>
        [JsonProperty(PropertyName = "extendedMetadata")]
        public System.Collections.Generic.Dictionary<string, System.Object> ExtendedMetadata { get; set; }
        
        /// <value>
        /// The name of the fault domain the instance is running in.
        /// <br/>
        /// A fault domain is a grouping of hardware and infrastructure within an availability domain.
        /// Each availability domain contains three fault domains. Fault domains let you distribute your
        /// instances so that they are not on the same physical hardware within a single availability domain.
        /// A hardware failure or Compute hardware maintenance that affects one fault domain does not affect
        /// instances in other fault domains.
        /// <br/>
        /// If you do not specify the fault domain, the system selects one for you.
        /// <br/>
        /// Example: FAULT-DOMAIN-1
        /// </value>
        [JsonProperty(PropertyName = "faultDomain")]
        public string FaultDomain { get; set; }
        
        /// <value>
        /// Free-form tags for this resource. Each tag is a simple key-value pair with no
        /// predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
        /// <br/>
        /// Example: {&quot;Department&quot;: &quot;Finance&quot;}
        /// </value>
        [JsonProperty(PropertyName = "freeformTags")]
        public System.Collections.Generic.Dictionary<string, string> FreeformTags { get; set; }
        
        /// <value>
        /// The OCID of the instance.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Id is required.")]
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }
        
        /// <value>
        /// Deprecated. Use `sourceDetails` instead.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "imageId")]
        public string ImageId { get; set; }
        
        /// <value>
        /// When a bare metal or virtual machine
        /// instance boots, the iPXE firmware that runs on the instance is
        /// configured to run an iPXE script to continue the boot process.
        /// <br/>
        /// If you want more control over the boot process, you can provide
        /// your own custom iPXE script that will run when the instance boots.
        /// Be aware that the same iPXE script will run
        /// every time an instance boots, not only after the initial
        /// LaunchInstance call.
        /// <br/>
        /// The default iPXE script connects to the instance's local boot
        /// volume over iSCSI and performs a network boot. If you use a custom iPXE
        /// script and want to network-boot from the instance's local boot volume
        /// over iSCSI the same way as the default iPXE script, use the
        /// following iSCSI IP address: 169.254.0.2, and boot volume IQN:
        /// iqn.2015-02.oracle.boot.
        /// <br/>
        /// If your instance boot volume attachment type is paravirtualized,
        /// the boot volume is attached to the instance through virtio-scsi and no iPXE script is used.
        /// If your instance boot volume attachment type is paravirtualized
        /// and you use custom iPXE to network boot into your instance,
        /// the primary boot volume is attached as a data volume through virtio-scsi drive.
        /// <br/>
        /// For more information about the Bring Your Own Image feature of
        /// Oracle Cloud Infrastructure, see
        /// [Bring Your Own Image](https://docs.cloud.oracle.com/iaas/Content/Compute/References/bringyourownimage.htm).
        /// <br/>
        /// For more information about iPXE, see http://ipxe.org.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "ipxeScript")]
        public string IpxeScript { get; set; }
                ///
        /// <value>
        /// Specifies the configuration mode for launching virtual machine (VM) instances. The configuration modes are:
        /// * `NATIVE` - VM instances launch with iSCSI boot and VFIO devices. The default value for platform images.
        /// * `EMULATED` - VM instances launch with emulated devices, such as the E1000 network driver and emulated SCSI disk controller.
        /// * `PARAVIRTUALIZED` - VM instances launch with paravirtualized devices using VirtIO drivers.
        /// * `CUSTOM` - VM instances launch with custom configuration settings specified in the `LaunchOptions` parameter.
        /// 
        /// </value>
        ///
        public enum LaunchModeEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "NATIVE")]
            Native,
            [EnumMember(Value = "EMULATED")]
            Emulated,
            [EnumMember(Value = "PARAVIRTUALIZED")]
            Paravirtualized,
            [EnumMember(Value = "CUSTOM")]
            Custom
        };

        /// <value>
        /// Specifies the configuration mode for launching virtual machine (VM) instances. The configuration modes are:
        /// * `NATIVE` - VM instances launch with iSCSI boot and VFIO devices. The default value for platform images.
        /// * `EMULATED` - VM instances launch with emulated devices, such as the E1000 network driver and emulated SCSI disk controller.
        /// * `PARAVIRTUALIZED` - VM instances launch with paravirtualized devices using VirtIO drivers.
        /// * `CUSTOM` - VM instances launch with custom configuration settings specified in the `LaunchOptions` parameter.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "launchMode")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<LaunchModeEnum> LaunchMode { get; set; }
        
        [JsonProperty(PropertyName = "launchOptions")]
        public LaunchOptions LaunchOptions { get; set; }
        
        [JsonProperty(PropertyName = "instanceOptions")]
        public InstanceOptions InstanceOptions { get; set; }
        
        [JsonProperty(PropertyName = "availabilityConfig")]
        public InstanceAvailabilityConfig AvailabilityConfig { get; set; }
        
        [JsonProperty(PropertyName = "preemptibleInstanceConfig")]
        public PreemptibleInstanceConfigDetails PreemptibleInstanceConfig { get; set; }
                ///
        /// <value>
        /// The current state of the instance.
        /// </value>
        ///
        public enum LifecycleStateEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "MOVING")]
            Moving,
            [EnumMember(Value = "PROVISIONING")]
            Provisioning,
            [EnumMember(Value = "RUNNING")]
            Running,
            [EnumMember(Value = "STARTING")]
            Starting,
            [EnumMember(Value = "STOPPING")]
            Stopping,
            [EnumMember(Value = "STOPPED")]
            Stopped,
            [EnumMember(Value = "CREATING_IMAGE")]
            CreatingImage,
            [EnumMember(Value = "TERMINATING")]
            Terminating,
            [EnumMember(Value = "TERMINATED")]
            Terminated
        };

        /// <value>
        /// The current state of the instance.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "LifecycleState is required.")]
        [JsonProperty(PropertyName = "lifecycleState")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<LifecycleStateEnum> LifecycleState { get; set; }
        
        /// <value>
        /// Custom metadata that you provide.
        /// </value>
        [JsonProperty(PropertyName = "metadata")]
        public System.Collections.Generic.Dictionary<string, string> Metadata { get; set; }
        
        /// <value>
        /// The region that contains the availability domain the instance is running in.
        /// <br/>
        /// For the us-phoenix-1 and us-ashburn-1 regions, `phx` and `iad` are returned, respectively.
        /// For all other regions, the full region name is returned.
        /// <br/>
        /// Examples: `phx`, `eu-frankfurt-1`
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Region is required.")]
        [JsonProperty(PropertyName = "region")]
        public string Region { get; set; }
        
        /// <value>
        /// The shape of the instance. The shape determines the number of CPUs and the amount of memory
        /// allocated to the instance. You can enumerate all available shapes by calling
        /// {@link #listShapes(ListShapesRequest) listShapes}.
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Shape is required.")]
        [JsonProperty(PropertyName = "shape")]
        public string Shape { get; set; }
        
        [JsonProperty(PropertyName = "shapeConfig")]
        public InstanceShapeConfig ShapeConfig { get; set; }
        
        /// <value>
        /// Whether the instance\u2019s OCPUs and memory are distributed across multiple NUMA nodes.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "isCrossNumaNode")]
        public System.Nullable<bool> IsCrossNumaNode { get; set; }
        
        [JsonProperty(PropertyName = "sourceDetails")]
        public InstanceSourceDetails SourceDetails { get; set; }
        
        /// <value>
        /// System tags for this resource. Each key is predefined and scoped to a namespace.
        /// Example: {&quot;foo-namespace&quot;: {&quot;bar-key&quot;: &quot;value&quot;}}
        /// </value>
        [JsonProperty(PropertyName = "systemTags")]
        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, System.Object>> SystemTags { get; set; }
        
        /// <value>
        /// The date and time the instance was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        /// <br/>
        /// Example: 2016-08-25T21:10:29.600Z
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "TimeCreated is required.")]
        [JsonProperty(PropertyName = "timeCreated")]
        public System.Nullable<System.DateTime> TimeCreated { get; set; }
        
        [JsonProperty(PropertyName = "agentConfig")]
        public InstanceAgentConfig AgentConfig { get; set; }
        
        /// <value>
        /// The date and time the instance is expected to be stopped / started,  in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        /// After that time if instance hasn't been rebooted, Oracle will reboot the instance within 24 hours of the due time.
        /// Regardless of how the instance was stopped, the flag will be reset to empty as soon as instance reaches Stopped state.
        /// Example: 2018-05-25T21:10:29.600Z
        /// </value>
        [JsonProperty(PropertyName = "timeMaintenanceRebootDue")]
        public System.Nullable<System.DateTime> TimeMaintenanceRebootDue { get; set; }
        
        [JsonProperty(PropertyName = "platformConfig")]
        public PlatformConfig PlatformConfig { get; set; }
        
        /// <value>
        /// The OCID of the Instance Configuration used to source launch details for this instance. Any other fields supplied in the instance launch request override the details stored in the Instance Configuration for this instance launch.
        /// </value>
        [JsonProperty(PropertyName = "instanceConfigurationId")]
        public string InstanceConfigurationId { get; set; }
        
        /// <value>
        /// List of licensing configurations associated with the instance.
        /// </value>
        [JsonProperty(PropertyName = "licensingConfigs")]
        public System.Collections.Generic.List<LicensingConfig> LicensingConfigs { get; set; }
        
    }
}
