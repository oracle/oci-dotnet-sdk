/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;

namespace Oci.FleetsoftwareupdateService.Models
{
    /// <summary>
    /// Goal version or image details for the Exadata Fleet Update Cycle.
    /// 
    /// </summary>
    [JsonConverter(typeof(FsuGoalVersionDetailsModelConverter))]
    public class FsuGoalVersionDetails 
    {
                ///
        /// <value>
        /// Type of goal version specified
        /// 
        /// </value>
        ///
        public enum TypeEnum {
            [EnumMember(Value = "VERSION")]
            Version,
            [EnumMember(Value = "IMAGE_ID")]
            ImageId,
            [EnumMember(Value = "EXADB_STACK")]
            ExadbStack
        };

                ///
        /// <value>
        /// Goal home policy to use when Staging the Goal Version during patching.
        /// CREATE_NEW: Create a new DBHome (for Database Collections) for the specified image or version.
        /// USE_EXISTING: All database targets in the same VMCluster or CloudVmCluster will be moved to a shared database home. 
        ///   If an existing home for the selected image or version is not found in the VM Cluster for a target database, then a new home will be created. 
        ///   If more than one existing home for the selected image is found, then the home with the least number of databases will be used. 
        ///   If multiple homes have the least number of databases, then a home will be selected at random.
        /// 
        /// </value>
        ///
        public enum HomePolicyEnum {
            [EnumMember(Value = "CREATE_NEW")]
            CreateNew,
            [EnumMember(Value = "USE_EXISTING")]
            UseExisting
        };

        /// <value>
        /// Goal home policy to use when Staging the Goal Version during patching.
        /// CREATE_NEW: Create a new DBHome (for Database Collections) for the specified image or version.
        /// USE_EXISTING: All database targets in the same VMCluster or CloudVmCluster will be moved to a shared database home. 
        ///   If an existing home for the selected image or version is not found in the VM Cluster for a target database, then a new home will be created. 
        ///   If more than one existing home for the selected image is found, then the home with the least number of databases will be used. 
        ///   If multiple homes have the least number of databases, then a home will be selected at random.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "homePolicy")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<HomePolicyEnum> HomePolicy { get; set; }
        
        /// <value>
        /// Prefix name used for new DB home resources created as part of the Stage Action.
        /// Format: <specified_prefix>_<timestamp>
        /// If not specified, a default OCI DB home resource will be generated for the new DB home resources created.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "newHomePrefix")]
        public string NewHomePrefix { get; set; }
        
    }

    public class FsuGoalVersionDetailsModelConverter : JsonConverter
    {
        private static NLog.Logger logger = NLog.LogManager.GetCurrentClassLogger();
        public override bool CanWrite => false;
        public override bool CanRead => true;
        public override bool CanConvert(System.Type type)
        {
            return type == typeof(FsuGoalVersionDetails);
        }
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            throw new System.InvalidOperationException("Use default serialization.");
        }

        public override object ReadJson(JsonReader reader, System.Type objectType, object existingValue, JsonSerializer serializer)
        {
            var jsonObject = JObject.Load(reader);
            var obj = default(FsuGoalVersionDetails);
            var discriminator = jsonObject["type"].Value<string>();
            switch (discriminator)
            {
                case "EXADB_STACK":
                    obj = new ExadbStackFsuGoalVersionDetails();
                    break;
                case "VERSION":
                    obj = new VersionFsuTargetDetails();
                    break;
                case "IMAGE_ID":
                    obj = new ImageIdFsuTargetDetails();
                    break;
            }
            if (obj != null)
            {
                serializer.Populate(jsonObject.CreateReader(), obj);
            }
            else
            {
                logger.Warn($"The type {discriminator} is not present under FsuGoalVersionDetails! Returning null value.");
            }
            return obj;
        }
    }
}
