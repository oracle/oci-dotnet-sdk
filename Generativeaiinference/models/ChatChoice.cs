/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.GenerativeaiinferenceService.Models
{
    /// <summary>
    /// Represents a single instance of the chat response.
    /// </summary>
    public class ChatChoice 
    {
        
        /// <value>
        /// The index of the chat.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Index is required.")]
        [JsonProperty(PropertyName = "index")]
        public System.Nullable<int> Index { get; set; }
        
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Message is required.")]
        [JsonProperty(PropertyName = "message")]
        public Message Message { get; set; }
        
        /// <value>
        /// The reason why the model stopped generating tokens.
        /// <br/>
        /// Stops if the model hits a natural stop point or a provided stop sequence. Returns the length if the tokens reach the specified maximum number of tokens.
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "FinishReason is required.")]
        [JsonProperty(PropertyName = "finishReason")]
        public string FinishReason { get; set; }
        
        [JsonProperty(PropertyName = "logprobs")]
        public Logprobs Logprobs { get; set; }
        
        [JsonProperty(PropertyName = "usage")]
        public Usage Usage { get; set; }
        
        [JsonProperty(PropertyName = "groundingMetadata")]
        public GroundingMetadata GroundingMetadata { get; set; }
        
    }
}
