/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.OcvpService.Models
{
    /// <summary>
    /// Details of the initial Cluster of SDDC.
    /// </summary>
    public class InitialClusterConfiguration 
    {
        
        /// <value>
        /// vSphere Cluster types.
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "VsphereType is required.")]
        [JsonProperty(PropertyName = "vsphereType")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<VsphereTypes> VsphereType { get; set; }
        
        /// <value>
        /// The availability domain to create the Cluster's ESXi hosts in. For multi-AD Cluster deployment, set to `multi-AD`.
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "ComputeAvailabilityDomain is required.")]
        [JsonProperty(PropertyName = "computeAvailabilityDomain")]
        public string ComputeAvailabilityDomain { get; set; }
        
        /// <value>
        /// A descriptive name for the Cluster.
        /// Cluster name requirements are 1-22 character length limit, Must start with a letter, Must be English letters, numbers, - only, No repeating hyphens, Must be unique within the region.
        /// Avoid entering confidential information.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }
        
        /// <value>
        /// A prefix used in the name of each ESXi host and Compute instance in the Cluster.
        /// If this isn't set, the Cluster's `displayName` is used as the prefix.
        /// <br/>
        /// For example, if the value is `myCluster`, the ESXi hosts are named `myCluster-1`,
        /// `myCluster-2`, and so on.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "instanceDisplayNamePrefix")]
        public string InstanceDisplayNamePrefix { get; set; }
        
        /// <value>
        /// The number of ESXi hosts to create in the Cluster. You can add more hosts later
        /// (see {@link #createEsxiHost(CreateEsxiHostRequest) createEsxiHost}). Creating
        /// a Cluster with a ESXi host count of 1 will be considered a single ESXi host Cluster.
        /// <br/>
        /// **Note:** If you later delete EXSi hosts from a production Cluster to total less
        /// than 3, you are still billed for the 3 minimum recommended ESXi hosts. Also,
        /// you cannot add more VMware workloads to the Cluster until it again has at least
        /// 3 ESXi hosts.
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "EsxiHostsCount is required.")]
        [JsonProperty(PropertyName = "esxiHostsCount")]
        public System.Nullable<int> EsxiHostsCount { get; set; }
        
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "NetworkConfiguration is required.")]
        [JsonProperty(PropertyName = "networkConfiguration")]
        public NetworkConfiguration NetworkConfiguration { get; set; }
        
        /// <value>
        /// The billing option selected during Cluster creation.
        /// {@link #listSupportedCommitments(ListSupportedCommitmentsRequest) listSupportedCommitments}.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "initialCommitment")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<Commitment> InitialCommitment { get; set; }
        
        /// <value>
        /// The CIDR block for the IP addresses that VMware VMs in the Cluster use to run application
        /// workloads.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "workloadNetworkCidr")]
        public string WorkloadNetworkCidr { get; set; }
        
        /// <value>
        /// The initial compute shape of the Cluster's ESXi hosts.
        /// {@link #listSupportedHostShapes(ListSupportedHostShapesRequest) listSupportedHostShapes}.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "initialHostShapeName")]
        public string InitialHostShapeName { get; set; }
        
        /// <value>
        /// The initial OCPU count of the Cluster's ESXi hosts.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "initialHostOcpuCount")]
        public System.Nullable<float> InitialHostOcpuCount { get; set; }
        
        /// <value>
        /// Indicates whether shielded instance is enabled for this Cluster.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "isShieldedInstanceEnabled")]
        public System.Nullable<bool> IsShieldedInstanceEnabled { get; set; }
        
        /// <value>
        /// The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the Capacity Reservation.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "capacityReservationId")]
        public string CapacityReservationId { get; set; }
        
        /// <value>
        /// A list of datastore info for the Cluster.
        /// This value is required only when `initialHostShapeName` is a standard shape.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "datastores")]
        public System.Collections.Generic.List<DatastoreInfo> Datastores { get; set; }
        
        /// <value>
        /// A list of datastore clusters.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "datastoreClusterIds")]
        public System.Collections.Generic.List<string> DatastoreClusterIds { get; set; }
        
    }
}
