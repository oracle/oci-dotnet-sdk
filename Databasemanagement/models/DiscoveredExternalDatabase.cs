/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.DatabasemanagementService.Models
{
    /// <summary>
    /// The details of an external Oracle Database discovered in an external DB system discovery run.
    /// </summary>
    public class DiscoveredExternalDatabase : DiscoveredExternalDbSystemComponent
    {
        
        /// <value>
        /// The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the compartment.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "CompartmentId is required.")]
        [JsonProperty(PropertyName = "compartmentId")]
        public string CompartmentId { get; set; }
        
        /// <value>
        /// The `DB_UNIQUE_NAME` of the external database.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "DbUniqueName is required.")]
        [JsonProperty(PropertyName = "dbUniqueName")]
        public string DbUniqueName { get; set; }
        
        /// <value>
        /// The type of Oracle Database. Indicates whether the database is a Container Database,
        /// Pluggable Database, or a Non-container Database.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "dbType")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<DatabaseSubType> DbType { get; set; }
        
        /// <value>
        /// Indicates whether the Oracle Database is part of a cluster.
        /// </value>
        [JsonProperty(PropertyName = "isCluster")]
        public System.Nullable<bool> IsCluster { get; set; }
        
        /// <value>
        /// The Oracle Database edition.
        /// </value>
        [JsonProperty(PropertyName = "dbEdition")]
        public string DbEdition { get; set; }
        
        /// <value>
        /// The Oracle Database ID.
        /// </value>
        [JsonProperty(PropertyName = "dbId")]
        public string DbId { get; set; }
        
        /// <value>
        /// The database packs licensed for the external Oracle Database.
        /// </value>
        [JsonProperty(PropertyName = "dbPacks")]
        public string DbPacks { get; set; }
                ///
        /// <value>
        /// The role of the Oracle Database in Oracle Data Guard configuration.
        /// </value>
        ///
        public enum DbRoleEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "LOGICAL_STANDBY")]
            LogicalStandby,
            [EnumMember(Value = "PHYSICAL_STANDBY")]
            PhysicalStandby,
            [EnumMember(Value = "SNAPSHOT_STANDBY")]
            SnapshotStandby,
            [EnumMember(Value = "PRIMARY")]
            Primary,
            [EnumMember(Value = "FAR_SYNC")]
            FarSync
        };

        /// <value>
        /// The role of the Oracle Database in Oracle Data Guard configuration.
        /// </value>
        [JsonProperty(PropertyName = "dbRole")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<DbRoleEnum> DbRole { get; set; }
        
        /// <value>
        /// The Oracle Database version.
        /// </value>
        [JsonProperty(PropertyName = "dbVersion")]
        public string DbVersion { get; set; }
        
        /// <value>
        /// The list of Pluggable Databases.
        /// </value>
        [JsonProperty(PropertyName = "pluggableDatabases")]
        public System.Collections.Generic.List<DiscoveredExternalPluggableDatabase> PluggableDatabases { get; set; }
        
        [JsonProperty(PropertyName = "connector")]
        public ExternalDbSystemDiscoveryConnector Connector { get; set; }
        
        /// <value>
        /// Indicates whether Diagnostics & Management should be enabled for all the current pluggable databases in the container database.
        /// </value>
        [JsonProperty(PropertyName = "canEnableAllCurrentPdbs")]
        public System.Nullable<bool> CanEnableAllCurrentPdbs { get; set; }
        
        /// <value>
        /// Indicates whether Diagnostics & Management should be enabled automatically for all the pluggable databases in the container database.
        /// </value>
        [JsonProperty(PropertyName = "isAutoEnablePluggableDatabase")]
        public System.Nullable<bool> IsAutoEnablePluggableDatabase { get; set; }
        
        [JsonProperty(PropertyName = "componentType")]
        private readonly string componentType = "DATABASE";
    }
}
