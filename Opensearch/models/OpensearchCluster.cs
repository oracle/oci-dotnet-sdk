/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.OpensearchService.Models
{
    /// <summary>
    /// An OpenSearch cluster resource. An OpenSearch cluster is set of instances that provide OpenSearch functionality in OCI Search Service with OpenSearch.
    /// For more information, see [About Search Service with OpenSearch](https://docs.cloud.oracle.com/iaas/Content/search-opensearch/Concepts/ociopensearch.htm).
    /// 
    /// </summary>
    public class OpensearchCluster 
    {
        
        /// <value>
        /// The OCID of the cluster.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Id is required.")]
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }
        
        /// <value>
        /// The name of the cluster. Avoid entering confidential information.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "DisplayName is required.")]
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }
        
        /// <value>
        /// The OCID of the compartment where the cluster is located.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "CompartmentId is required.")]
        [JsonProperty(PropertyName = "compartmentId")]
        public string CompartmentId { get; set; }
                ///
        /// <value>
        /// The current state of the cluster.
        /// </value>
        ///
        public enum LifecycleStateEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "ACTIVE")]
            Active,
            [EnumMember(Value = "CREATING")]
            Creating,
            [EnumMember(Value = "UPDATING")]
            Updating,
            [EnumMember(Value = "DELETING")]
            Deleting,
            [EnumMember(Value = "DELETED")]
            Deleted,
            [EnumMember(Value = "FAILED")]
            Failed
        };

        /// <value>
        /// The current state of the cluster.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "LifecycleState is required.")]
        [JsonProperty(PropertyName = "lifecycleState")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<LifecycleStateEnum> LifecycleState { get; set; }
        
        /// <value>
        /// The amount of time in milliseconds since the cluster was created.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "TimeCreated is required.")]
        [JsonProperty(PropertyName = "timeCreated")]
        public System.Nullable<System.DateTime> TimeCreated { get; set; }
        
        /// <value>
        /// The amount of time in milliseconds since the cluster was updated.
        /// </value>
        [JsonProperty(PropertyName = "timeUpdated")]
        public System.Nullable<System.DateTime> TimeUpdated { get; set; }
        
        /// <value>
        /// The amount of time in milliseconds since the cluster was updated.
        /// </value>
        [JsonProperty(PropertyName = "timeDeleted")]
        public System.Nullable<System.DateTime> TimeDeleted { get; set; }
        
        /// <value>
        /// Additional information about the current lifecycle state of the cluster.
        /// </value>
        [JsonProperty(PropertyName = "lifecycleDetails")]
        public string LifecycleDetails { get; set; }
        
        /// <value>
        /// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
        /// Example: {&quot;bar-key&quot;: &quot;value&quot;}
        /// </value>
        [JsonProperty(PropertyName = "freeformTags")]
        public System.Collections.Generic.Dictionary<string, string> FreeformTags { get; set; }
        
        /// <value>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace.
        /// Example: {&quot;foo-namespace&quot;: {&quot;bar-key&quot;: &quot;value&quot;}}
        /// </value>
        [JsonProperty(PropertyName = "definedTags")]
        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, System.Object>> DefinedTags { get; set; }
        
        /// <value>
        /// Usage of system tag keys. These predefined keys are scoped to namespaces.
        /// Example: {&quot;orcl-cloud&quot;: {&quot;free-tier-retained&quot;: &quot;true&quot;}}
        /// </value>
        [JsonProperty(PropertyName = "systemTags")]
        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, System.Object>> SystemTags { get; set; }
        
        /// <value>
        /// The software version the cluster is running.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "SoftwareVersion is required.")]
        [JsonProperty(PropertyName = "softwareVersion")]
        public string SoftwareVersion { get; set; }
        
        /// <value>
        /// The size in GB of the cluster's total storage.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "TotalStorageGB is required.")]
        [JsonProperty(PropertyName = "totalStorageGB")]
        public System.Nullable<int> TotalStorageGB { get; set; }
        
        /// <value>
        /// The fully qualified domain name (FQDN) for the cluster's API endpoint.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "OpensearchFqdn is required.")]
        [JsonProperty(PropertyName = "opensearchFqdn")]
        public string OpensearchFqdn { get; set; }
        
        /// <value>
        /// The cluster's private IP address.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "OpensearchPrivateIp is required.")]
        [JsonProperty(PropertyName = "opensearchPrivateIp")]
        public string OpensearchPrivateIp { get; set; }
        
        /// <value>
        /// The fully qualified domain name (FQDN) for the cluster's OpenSearch Dashboard API endpoint.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "OpendashboardFqdn is required.")]
        [JsonProperty(PropertyName = "opendashboardFqdn")]
        public string OpendashboardFqdn { get; set; }
        
        /// <value>
        /// The private IP address for the cluster's OpenSearch Dashboard.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "OpendashboardPrivateIp is required.")]
        [JsonProperty(PropertyName = "opendashboardPrivateIp")]
        public string OpendashboardPrivateIp { get; set; }
        
        /// <value>
        /// The number of master nodes configured for the cluster.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "MasterNodeCount is required.")]
        [JsonProperty(PropertyName = "masterNodeCount")]
        public System.Nullable<int> MasterNodeCount { get; set; }
        
        /// <value>
        /// The instance type for the cluster's master nodes.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "MasterNodeHostType is required.")]
        [JsonProperty(PropertyName = "masterNodeHostType")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<MasterNodeHostType> MasterNodeHostType { get; set; }
        
        /// <value>
        /// The bare metal shape for the cluster's master nodes.
        /// </value>
        [JsonProperty(PropertyName = "masterNodeHostBareMetalShape")]
        public string MasterNodeHostBareMetalShape { get; set; }
        
        /// <value>
        /// The node shape for the cluster's master nodes.
        /// </value>
        [JsonProperty(PropertyName = "masterNodeHostShape")]
        public string MasterNodeHostShape { get; set; }
        
        /// <value>
        /// The number of OCPUs configured for cluster's master nodes.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "MasterNodeHostOcpuCount is required.")]
        [JsonProperty(PropertyName = "masterNodeHostOcpuCount")]
        public System.Nullable<int> MasterNodeHostOcpuCount { get; set; }
        
        /// <value>
        /// The amount of memory in GB, for the cluster's master nodes.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "MasterNodeHostMemoryGB is required.")]
        [JsonProperty(PropertyName = "masterNodeHostMemoryGB")]
        public System.Nullable<int> MasterNodeHostMemoryGB { get; set; }
        
        /// <value>
        /// The number of data nodes configured for the cluster.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "DataNodeCount is required.")]
        [JsonProperty(PropertyName = "dataNodeCount")]
        public System.Nullable<int> DataNodeCount { get; set; }
        
        /// <value>
        /// The instance type for the cluster's data nodes.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "DataNodeHostType is required.")]
        [JsonProperty(PropertyName = "dataNodeHostType")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<DataNodeHostType> DataNodeHostType { get; set; }
        
        /// <value>
        /// The bare metal shape for the cluster's data nodes.
        /// </value>
        [JsonProperty(PropertyName = "dataNodeHostBareMetalShape")]
        public string DataNodeHostBareMetalShape { get; set; }
        
        /// <value>
        /// The node shape for the cluster's data nodes.
        /// </value>
        [JsonProperty(PropertyName = "dataNodeHostShape")]
        public string DataNodeHostShape { get; set; }
        
        /// <value>
        /// The number of OCPUs configured for the cluster's data nodes.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "DataNodeHostOcpuCount is required.")]
        [JsonProperty(PropertyName = "dataNodeHostOcpuCount")]
        public System.Nullable<int> DataNodeHostOcpuCount { get; set; }
        
        /// <value>
        /// The amount of memory in GB, for the cluster's data nodes.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "DataNodeHostMemoryGB is required.")]
        [JsonProperty(PropertyName = "dataNodeHostMemoryGB")]
        public System.Nullable<int> DataNodeHostMemoryGB { get; set; }
        
        /// <value>
        /// The amount of storage in GB, to configure per node for the cluster's data nodes.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "DataNodeStorageGB is required.")]
        [JsonProperty(PropertyName = "dataNodeStorageGB")]
        public System.Nullable<int> DataNodeStorageGB { get; set; }
        
        /// <value>
        /// The number of search nodes configured for the cluster.
        /// </value>
        [JsonProperty(PropertyName = "searchNodeCount")]
        public System.Nullable<int> SearchNodeCount { get; set; }
        
        /// <value>
        /// The instance type for the cluster's search nodes.
        /// </value>
        [JsonProperty(PropertyName = "searchNodeHostType")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<SearchNodeHostType> SearchNodeHostType { get; set; }
        
        /// <value>
        /// The node shape for the cluster's search nodes.
        /// </value>
        [JsonProperty(PropertyName = "searchNodeHostShape")]
        public string SearchNodeHostShape { get; set; }
        
        /// <value>
        /// The number of OCPUs configured for the cluster's search nodes.
        /// </value>
        [JsonProperty(PropertyName = "searchNodeHostOcpuCount")]
        public System.Nullable<int> SearchNodeHostOcpuCount { get; set; }
        
        /// <value>
        /// The amount of memory in GB, for the cluster's search nodes.
        /// </value>
        [JsonProperty(PropertyName = "searchNodeHostMemoryGB")]
        public System.Nullable<int> SearchNodeHostMemoryGB { get; set; }
        
        /// <value>
        /// The amount of storage in GB, to configure per node for the cluster's search nodes.
        /// </value>
        [JsonProperty(PropertyName = "searchNodeStorageGB")]
        public System.Nullable<int> SearchNodeStorageGB { get; set; }
        
        /// <value>
        /// The node shape for the cluster's OpenSearch Dashboard nodes.
        /// </value>
        [JsonProperty(PropertyName = "opendashboardNodeHostShape")]
        public string OpendashboardNodeHostShape { get; set; }
        
        /// <value>
        /// The number of OpenSearch Dashboard nodes configured for the cluster.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "OpendashboardNodeCount is required.")]
        [JsonProperty(PropertyName = "opendashboardNodeCount")]
        public System.Nullable<int> OpendashboardNodeCount { get; set; }
        
        /// <value>
        /// The amount of memory in GB, for the cluster's OpenSearch Dashboard nodes.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "OpendashboardNodeHostOcpuCount is required.")]
        [JsonProperty(PropertyName = "opendashboardNodeHostOcpuCount")]
        public System.Nullable<int> OpendashboardNodeHostOcpuCount { get; set; }
        
        /// <value>
        /// The amount of memory in GB, for the cluster's OpenSearch Dashboard nodes.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "OpendashboardNodeHostMemoryGB is required.")]
        [JsonProperty(PropertyName = "opendashboardNodeHostMemoryGB")]
        public System.Nullable<int> OpendashboardNodeHostMemoryGB { get; set; }
        
        /// <value>
        /// The OCID of the cluster's VCN.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "VcnId is required.")]
        [JsonProperty(PropertyName = "vcnId")]
        public string VcnId { get; set; }
        
        /// <value>
        /// The OCID of the cluster's subnet.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "SubnetId is required.")]
        [JsonProperty(PropertyName = "subnetId")]
        public string SubnetId { get; set; }
        
        /// <value>
        /// The OCID for the compartment where the cluster's VCN is located.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "VcnCompartmentId is required.")]
        [JsonProperty(PropertyName = "vcnCompartmentId")]
        public string VcnCompartmentId { get; set; }
        
        /// <value>
        /// The OCID for the compartment where the cluster's subnet is located.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "SubnetCompartmentId is required.")]
        [JsonProperty(PropertyName = "subnetCompartmentId")]
        public string SubnetCompartmentId { get; set; }
        
        /// <value>
        /// The fully qualified domain name (FQDN) for the cluster's API endpoint.
        /// </value>
        [JsonProperty(PropertyName = "fqdn")]
        public string Fqdn { get; set; }
        
        /// <value>
        /// The availability domains to distribute the cluser nodes across.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "AvailabilityDomains is required.")]
        [JsonProperty(PropertyName = "availabilityDomains")]
        public System.Collections.Generic.List<string> AvailabilityDomains { get; set; }
        
        /// <value>
        /// The security mode of the cluster.
        /// </value>
        [JsonProperty(PropertyName = "securityMode")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<SecurityMode> SecurityMode { get; set; }
        
        /// <value>
        /// The name of the master user that are used to manage security config
        /// </value>
        [JsonProperty(PropertyName = "securityMasterUserName")]
        public string SecurityMasterUserName { get; set; }
        
        /// <value>
        /// The password hash of the master user that are used to manage security config
        /// </value>
        [JsonProperty(PropertyName = "securityMasterUserPasswordHash")]
        public string SecurityMasterUserPasswordHash { get; set; }
        
        [JsonProperty(PropertyName = "securitySamlConfig")]
        public SecuritySamlConfig SecuritySamlConfig { get; set; }
        
        [JsonProperty(PropertyName = "backupPolicy")]
        public BackupPolicy BackupPolicy { get; set; }
        
        /// <value>
        /// The customer IP addresses of the endpoint in customer VCN
        /// </value>
        [JsonProperty(PropertyName = "reverseConnectionEndpointCustomerIps")]
        public System.Collections.Generic.List<string> ReverseConnectionEndpointCustomerIps { get; set; }
        
        /// <value>
        /// The list of reverse connection endpoints.
        /// </value>
        [JsonProperty(PropertyName = "reverseConnectionEndpoints")]
        public System.Collections.Generic.List<ReverseConnectionEndpoint> ReverseConnectionEndpoints { get; set; }
        
        [JsonProperty(PropertyName = "outboundClusterConfig")]
        public OutboundClusterConfig OutboundClusterConfig { get; set; }
        
        /// <value>
        /// List of inbound clusters for which this cluster is an outbound cluster
        /// </value>
        [JsonProperty(PropertyName = "inboundClusterIds")]
        public System.Collections.Generic.List<string> InboundClusterIds { get; set; }
        
        [JsonProperty(PropertyName = "maintenanceDetails")]
        public MaintenanceDetails MaintenanceDetails { get; set; }
        
    }
}
