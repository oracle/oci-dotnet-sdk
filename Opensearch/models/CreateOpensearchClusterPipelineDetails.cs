/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.OpensearchService.Models
{
    /// <summary>
    /// The configuration details for a new OpenSearch cluster pipeline.
    /// </summary>
    public class CreateOpensearchClusterPipelineDetails 
    {
        
        /// <value>
        /// The name of the cluster pipeline. Avoid entering confidential information.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "DisplayName is required.")]
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }
        
        /// <value>
        /// The number of OCPUs configured for each pipeline node.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "OcpuCount is required.")]
        [JsonProperty(PropertyName = "ocpuCount")]
        public System.Nullable<int> OcpuCount { get; set; }
        
        /// <value>
        /// The amount of memory in GB, for each pipeline node.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "MemoryGB is required.")]
        [JsonProperty(PropertyName = "memoryGB")]
        public System.Nullable<int> MemoryGB { get; set; }
        
        /// <value>
        /// The number of nodes configured for the pipeline.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "NodeCount is required.")]
        [JsonProperty(PropertyName = "nodeCount")]
        public System.Nullable<int> NodeCount { get; set; }
        
        /// <value>
        /// The pipeline node shape.
        /// </value>
        [JsonProperty(PropertyName = "nodeShape")]
        public string NodeShape { get; set; }
        
        /// <value>
        /// The pipeline configuration in YAML format. The command accepts the pipeline configuration as a string or within a .yaml file. If you provide the configuration as a string, each new line must be escaped with \\.
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "PipelineConfigurationBody is required.")]
        [JsonProperty(PropertyName = "pipelineConfigurationBody")]
        public string PipelineConfigurationBody { get; set; }
        
        /// <value>
        /// The data prepper config in YAML format. The command accepts the data prepper config as a string or within a .yaml file. If you provide the configuration as a string, each new line must be escaped with \\.
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "DataPrepperConfigurationBody is required.")]
        [JsonProperty(PropertyName = "dataPrepperConfigurationBody")]
        public string DataPrepperConfigurationBody { get; set; }
        
        /// <value>
        /// The OCID of the compartment to create the pipeline in.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "CompartmentId is required.")]
        [JsonProperty(PropertyName = "compartmentId")]
        public string CompartmentId { get; set; }
        
        /// <value>
        /// The OCID of the pipeline's VCN.
        /// </value>
        [JsonProperty(PropertyName = "vcnId")]
        public string VcnId { get; set; }
        
        /// <value>
        /// The OCID of the pipeline's subnet.
        /// </value>
        [JsonProperty(PropertyName = "subnetId")]
        public string SubnetId { get; set; }
        
        /// <value>
        /// The OCID for the compartment where the pipeline's VCN is located.
        /// </value>
        [JsonProperty(PropertyName = "vcnCompartmentId")]
        public string VcnCompartmentId { get; set; }
        
        /// <value>
        /// The OCID for the compartment where the pipeline's subnet is located.
        /// </value>
        [JsonProperty(PropertyName = "subnetCompartmentId")]
        public string SubnetCompartmentId { get; set; }
        
        /// <value>
        /// The OCID of the NSG where the pipeline private endpoint vnic will be attached.
        /// </value>
        [JsonProperty(PropertyName = "nsgId")]
        public string NsgId { get; set; }
        
        /// <value>
        /// The customer IP and the corresponding fully qualified domain name that the pipeline will connect to.
        /// </value>
        [JsonProperty(PropertyName = "reverseConnectionEndpoints")]
        public System.Collections.Generic.List<OpensearchPipelineReverseConnectionEndpoint> ReverseConnectionEndpoints { get; set; }
        
        /// <value>
        /// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
        /// Example: {&quot;bar-key&quot;: &quot;value&quot;}
        /// </value>
        [JsonProperty(PropertyName = "freeformTags")]
        public System.Collections.Generic.Dictionary<string, string> FreeformTags { get; set; }
        
        /// <value>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace.
        /// Example: {&quot;foo-namespace&quot;: {&quot;bar-key&quot;: &quot;value&quot;}}
        /// </value>
        [JsonProperty(PropertyName = "definedTags")]
        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, System.Object>> DefinedTags { get; set; }
        
    }
}
